[* 

var parse = require('./src/parse.js');
var evaluation = require('./src/eval.js');
evaluation.initialize();

*]

/~ Tokens Definitions for Scheme Syntax ~/

/~ Tokens to be ignored (e.g. whitespace, comments) ~/
! ' |\t|\r\n|\n|;[^\n]*\n' 
;

/~ Token pattern matching rules ~/
    '[ ]?\)'                                      RPAREN
    '\([ ]?'                                      LPAREN
    '\.'                                          DOT
    '\''
    '[0-9]+[ ]?|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'    NUMBER   [* %match = parseFloat( %match ); *]
    '[^\(\)0-9\.\'\`\,\@" ][^\) ]*'               SYMBOL   [* /*symbols cannot begin with digits, parens, quotes, dots, etc.*/ *]
    '\"[^"]*\"'                                   STRING   [* %match = %match.substr( 1, %match.length - 2 ); *]
  ;

##


readonce:   sexpr                                    [* parse.tokenized = %1; *]
            ;

sexpr:      atom                                      
            | list                                   [* %% = %1; *]
            ;

list:       LPAREN RPAREN	                         [* %% = parse.createNull(); *]
            | LPAREN atom members RPAREN             [* %% = parse.createCons(%2, %3); /* a list must first start with a symbol */ *]
            | LPAREN members DOT sexpr RPAREN        [* %% = parse.createDotList(%2, %4); *]
            ;

members:    members sexpr                            [* %% = parse.createCons(%2, %1); *]
            | sexpr                                  [* %% = parse.createCons(%1); *]
            ;

atom:       NUMBER                                   [* %% = parse.createItem('NUMBER', %1); *]
            | SYMBOL                                 [* %% = parse.createItem('SYMBOL', %1); *]
            | STRING                                 [* %% = parse.createItem('STRING', %1); *]
            ;



[*
var error_offsets = new Array();
var error_lookaheads = new Array();
var error_count = 0;
var DEBUG = false;

console.log("Welcome to the Scheme REPL by Travis Hoover");

process.stdin.resume();
process.stdin.setEncoding('utf8');
process.stdout.write("> ");

process.argv.forEach(function (val, index, array) {
    if( val === '--debug' || val === '-d' ){
        DEBUG = true;
    }
});

process.stdin.on('data', function (text) {

    // ( R )

    text = text.trim();

    if( text != "" ) {


        if (text.toLowerCase() == 'print alist') {

            evaluation.printSymbols();
        }
        else if (text.toLowerCase() == 'print tokens') {

            parse.print(); 
        }
        else {

            // send text to scheme tokenizer ( E )
            if( ( error_count = __NODEJS_parse( text, error_offsets, error_lookaheads ) ) > 0 ) {

                for( var i = 0; i < error_count; i++ )
                    console.log( "Parse error near " + text.substr( error_offsets[i] ) + ", expecting \"" + error_lookaheads[i].join() + "\"" );
            }
            else {

                  parse.print(); 
                //console.log(evaluation.eval(parse.tokenized)); // Print the evaluated expression ( P )
            }
        }
    }
    process.stdout.write("> "); // now loop or wait for user input again ( L )
});
*]